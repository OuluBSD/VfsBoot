(test-case
  (id "001-hello-world")
  (title "Bootstrap hello world TU via S-expression commands")
  (difficulty easy)
  (tags (cpp17 bootstrap ast-workflow))
  (instructions
    (format "Respond with a single S-expression. Use (begin ... ) as the top-level form. Inside, prefer (comment \"...\") for narration and (cmd \"<tool>\" <args...>) for actual actions. String arguments are in double quotes; integers stay bare; booleans can use #t/#f. Do not emit shell prompts or prose outside the S-expression.")
    (tools
      (item "(cmd \"tools\")  ; list available commands inside codex-mini")
      (item "(cmd \"ls\" \"/path\") ; inspect a VFS directory")
      (item "(cmd \"tree\") ; print the whole VFS tree (optional, noisy)")
      (item "(cmd \"cat\" \"/path\") ; read a file")
      (item "(cmd \"mkdir\" \"/dir\") ; ensure directory exists")
      (item "(cmd \"touch\" \"/file\") ; create empty file")
      (item "(cmd \"echo\" \"/file\" \"text\") ; overwrite file with text")
      (item "(cmd \"vfs-write\" \"/file\" \"text\") ; write arbitrary content (preferred for multi-line strings)")
      (item "(cmd \"cpp.tu\" \"/astcpp/...\") ; create a translation-unit AST node")
      (item "(cmd \"cpp.include\" \"<tu>\" \"header\" 0-or-1) ; attach include directive")
      (item "(cmd \"cpp.func\" \"<tu>\" \"name\" \"ret\") ; add function AST node")
      (item "(cmd \"cpp.param\" \"<fn>\" \"type\" \"name\") ; add a parameter")
      (item "(cmd \"cpp.print\" \"<fn>\" \"message\") ; append std::cout << message << std::endl;")
      (item "(cmd \"cpp.returni\" \"<fn>\" N) ; append integer return statement")
      (item "(cmd \"cpp.dump\" \"<tu>\" \"/cpp/target.cpp\") ; materialise TU into /cpp")
      (item "(cmd \"parse\" \"/src/file.sexp\" \"/ast/name\") ; parse S-expression source into AST")
      (item "(cmd \"eval\" \"/ast/name\") ; evaluate a parsed AST (for Stage1 λ-programs)")
      (item "(cmd \"ai\" \"prompt\") ; ask LLM (not needed in deterministic tests)")
      (item "(cmd \"tools\") again whenever unsure"))
    (workflow
      (step "(cmd \"tools\") → learn the surface area")
      (step "(cmd \"ls\" \"/\") → inspect root")
      (step "(cmd \"ls\" \"/cpp\") and (cmd \"ls\" \"/astcpp\") → inspect relevant areas")
      (step "Use mkdir/touch or cpp.* commands to create/update AST nodes")
      (step "Emit final C++ source with cpp.dump and verify with cat if needed")
      (step "Close with (comment \"std::cout handles the greeting\") to narrate the stream")
      (step "Only send the S-expression; no trailing commentary")))
  (prompt "Build a translation unit under /astcpp/tests/hello that prints \"Hello from tests!\" and returns 0. Use the S-expression command format above. Ensure the generated /cpp/tests/hello.cpp contains #include <iostream>, defines int main(), streams the greeting via std::cout, and ends with return 0.")
  (expected-output
    (contains "(begin")
    (contains "(cmd \"tools\")")
    (contains "(cmd \"ls\" \"/cpp\")")
    (contains "(cmd \"cpp.tu\" \"/astcpp/tests/hello\")")
    (contains "(cmd \"cpp.include\" \"/astcpp/tests/hello\" \"iostream\" 1)")
    (contains "(cmd \"cpp.func\" \"/astcpp/tests/hello\" \"main\" \"int\")")
    (contains "(cmd \"cpp.print\" \"/astcpp/tests/hello/main\" \"Hello from tests!\")")
    (contains "(cmd \"cpp.returni\" \"/astcpp/tests/hello/main\" 0)")
    (contains "(cmd \"cpp.dump\" \"/astcpp/tests/hello\" \"/cpp/tests/hello.cpp\")")
    (contains "Hello from tests!")
    (contains "(comment \"std::cout handles the greeting\")")
    (contains ")"))
  (assertions
    (contains "/cpp/tests/hello.cpp" "#include <iostream>")
    (contains "/cpp/tests/hello.cpp" "int main()")
    (contains "/cpp/tests/hello.cpp" "Hello from tests!")
    (contains "/cpp/tests/hello.cpp" "return 0;")
    (not-contains "/cpp/tests/hello.cpp" "TODO"))
  (llm-targets
    (openai default)
    (llama "http://192.168.1.169:8080/")))
