# U++ Assembly Usage Example
# Demonstrates complete workflow for U++ development in VfsShell

# Create a new U++ application assembly
upp.create HelloWorld /tmp/hello.var

# Verify the assembly was created with a primary package
upp.list

# Create a simple assembly file structure manually
echo /tmp/webserver.var "// Web Server Assembly for U++
[Package: WebServerApp]
Path=WebServerApp/src
Primary=true
Files=
  main.cpp
  WebServer.h
  WebServer.cpp
Dependencies=
  Core
  CtrlCore
  Http

[Package: Http]
Path=upp/Http
Dependencies=
  Core
  Thread

[Package: Thread]
Path=upp/Thread
Dependencies=
  Core

[Package: CtrlCore]
Path=upp/CtrlCore
Dependencies=
  Core

[Package: Core]
Path=upp/Core
"

# Load the more complex assembly
upp.load /tmp/webserver.var

# List all assemblies and packages
upp.list

# Now both HelloWorld and WebServerApp assemblies are available
# Each with their respective package structures

# This demonstrates the core U++ assembly workflow:
# 1. upp.create - Initialize new assembly with primary package
# 2. upp.load - Load existing .var files with complex package structures  
# 3. upp.list - View loaded assemblies and their packages
# 4. upp.gui - Launch ncurses-based IDE (interactive mode)

# The GUI provides:
# - Package list (top-left panel)
# - File list for selected package (bottom-left panel) 
# - Main code editor (right panel)
# - Menu bar and status information